{
  "uid" : "3844168a1fe4da7c",
  "name" : "real time database migrate between mongodb",
  "fullName" : "test_pipeline.TestPipeline#test_migrate_job",
  "historyId" : "0657c83763def5bcb63193d5e13b577d",
  "time" : {
    "start" : 1658396893852,
    "stop" : 1658396900620,
    "duration" : 6768
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False\n +  where False = wait_scheduling(<lib.cli.Pipeline object at 0x7fc1671d62d0>, except_status=('running', 'wait_run'))",
  "statusTrace" : "self = <test.test_pipeline.TestPipeline object at 0x7fc16756dbd0>\n\n    @allure.title(\"real time database migrate between mongodb\")\n    def test_migrate_job(self):\n        p = make_new_pipeline(f\"migrate_{random_str()}\")\n        p1 = p.readFrom(source_name).writeTo(sink_name)\n        p1.start()\n>       assert wait_scheduling(p1, except_status=('running', 'wait_run'))\nE       AssertionError: assert False\nE        +  where False = wait_scheduling(<lib.cli.Pipeline object at 0x7fc1671d62d0>, except_status=('running', 'wait_run'))\n\ntest_pipeline.py:62: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False\n +  where False = wait_scheduling(<lib.cli.Pipeline object at 0x7fc1671d62d0>, except_status=('running', 'wait_run'))",
    "statusTrace" : "self = <test.test_pipeline.TestPipeline object at 0x7fc16756dbd0>\n\n    @allure.title(\"real time database migrate between mongodb\")\n    def test_migrate_job(self):\n        p = make_new_pipeline(f\"migrate_{random_str()}\")\n        p1 = p.readFrom(source_name).writeTo(sink_name)\n        p1.start()\n>       assert wait_scheduling(p1, except_status=('running', 'wait_run'))\nE       AssertionError: assert False\nE        +  where False = wait_scheduling(<lib.cli.Pipeline object at 0x7fc1671d62d0>, except_status=('running', 'wait_run'))\n\ntest_pipeline.py:62: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ffca5ab402a826c5",
      "name" : "stdout",
      "source" : "ffca5ab402a826c5.txt",
      "type" : "text/plain",
      "size" : 2896
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "pipeline"
  }, {
    "name" : "suite",
    "value" : "test_pipeline"
  }, {
    "name" : "subSuite",
    "value" : "TestPipeline"
  }, {
    "name" : "host",
    "value" : "96dd0e19ef0c"
  }, {
    "name" : "thread",
    "value" : "662-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_pipeline"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3844168a1fe4da7c.json",
  "parameterValues" : [ ]
}